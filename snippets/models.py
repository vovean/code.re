import uuid
from string import ascii_lowercase

from django.db import models
from django.db.models import TextChoices
from django.db.models.functions import Length
from django.utils.crypto import get_random_string

models.CharField.register_lookup(Length)


class SnippetManager(models.Manager):
    @staticmethod
    def get_next_short_link(last_short_link: str):
        new_link_num = ((
                                (ord(last_short_link[2]) - ord('a')) * 26 ** 0 +
                                (ord(last_short_link[1]) - ord('a')) * 26 ** 1 +
                                (ord(last_short_link[0]) - ord('a')) * 26 ** 2
                        ) + 1) % (26 ** 3)
        singles = new_link_num % 26
        tens = new_link_num // 26 % 26
        hundreds = new_link_num // 26 // 26
        return f"{ascii_lowercase[hundreds]}{ascii_lowercase[tens]}{ascii_lowercase[singles]}"

    def create(self, **kwargs):
        if 'link' in kwargs:
            raise Exception("link is autogenerated and cannot be set manually")
        link_mode = kwargs.pop('link_mode', "short")
        if link_mode == "short":
            last_short_link_snippet = self.filter(link__length=3)
            if not last_short_link_snippet.exists():
                kwargs["link"] = "aaa"
            else:
                last_link = last_short_link_snippet.last().link
                kwargs["link"] = self.get_next_short_link(last_link)
        elif link_mode == "long":
            link = get_random_string(length=8)
            while self.filter(link=link).exists():
                link = get_random_string(length=8)
            kwargs["link"] = link
        else:
            raise Exception(f"Invalid link mode: {link_mode}")

        return super().create(**kwargs)


class Snippet(models.Model):
    class SyntaxChoices(TextChoices):
        BASH = "Bash"
        C = "C"
        C_SHARP = "C#"
        CPP = "C++"
        CSS = "CSS"
        HTML = "HTML"
        JSON = "JSON"
        JAVA = "Java"
        JAVASCRIPT = "JavaScript"
        LUA = "Lua"
        OBJECTIVE_C = "Objective C"
        PHP = "PHP"
        PERL = "Perl"
        PYTHON = "Python"
        RUBY = "Ruby"
        SWIFT = "Swift"

    objects = SnippetManager()

    created_at = models.DateTimeField(auto_now_add=True)
    token = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    syntax = models.CharField(max_length=20, choices=SyntaxChoices.choices)
    code = models.TextField()
    link = models.CharField(max_length=8, unique=True)

    def as_dict(self):
        return {
            "code": self.code,
            "syntax": self.syntax,
            "link": self.link
        }
